-- This code calculates 2 + 3.
type Nat = μ a. 1 ⊕ a;

type ! = λ (b : *). μ a. b ⊗ a;

Zero = fold Nat (inl tt);
Succ = λ x. fold Nat (inr x);

One = Succ Zero;
Two = Succ One;
Three = Succ Two;

Pred = λ x. case unfold Nat x of inl s -> Zero | inr n -> n;

Zeros = fix p. let q ⊗ r = unfold _ p in fold (! Nat) (Zero ⊗ q);

Plus = fix p. λ x. λ y. case unfold Nat x of inl s -> y | inr n -> let rec ⊗ q = unfold _ p in Succ (rec n y);

Main = Plus Two Three;
