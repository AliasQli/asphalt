// data a * b = Tensor a b
// data 1 = Unit
// data a + b = Inl a | Inr b
// data 0
// type a & b = forall c. Either (a -> c) (b -> c) -> c
// type !A = A * (!A)

// LetTensor : A * B -> (A -> B -> C) -> C
(LetTensor (Tensor a b)) = λf (f a b)

// CasePlus : A + B -> (A -> C) -> (B -> C) -> C
(CasePlus (Inl a)) = λf λg (f a)
(CasePlus (Inr b)) = λf λg (g b)

// Absurd : 0 -> A
(Absurd x) = (Absurd x)

// With : A -> B -> A & B
// (With a b (Inl f)) = (f a)
// (With a b (Inr g)) = (g b)
(With a b) = λn ((CasePlus n) (λf (f a)) (λg (g b)))

// Fst : A & B -> A
(Fst w) = ((w) (Inl (λx x)))

// Snd : A & B -> B
(Snd w) = ((w) (Inr (λx x)))

// Fold : A * !A -> !A
(Fold x) = x

// Unfold : !A -> A * !A
(Unfold x) = x

// Fix : (!A -> A) -> A
(Fix) = λf (f ((UnsafeDup) ((Fix) f)))
  // UnsafeDup : A -> !A
  (UnsafeDup) = λx (Tensor x ((UnsafeDup) x))
